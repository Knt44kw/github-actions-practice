name: Artifact Job Output
# 他のファイルをpushしたときにこのジョブが動くのを防ぐために、workflow_dispatchにしておく
on: workflow_dispatch
  # push:
  #  branches: 
  #    - "develop*"
  #    - "main"
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        # 各 jobで 依存関係のインストールを繰り返し行っているので、 workflowの実行に時間がかかる
        # このような繰り返し実行され、時間のかかるジョブを共通化するためにキャッシュを利用する
        # https://github.com/marketplace/actions/cache
        uses: actions/cache@v3
        with:
          # nodejsの依存関係などのキャッシュが格納されているディレクトリ
          path: ~/.npm
          # key: 他のジョブでキャッシュを参照するために必要
          # ハッシュ値: 依存関係に変更が生じると ~/.npmの中身が変わる。 現在残っているキャッシュを後続ジョブで参照できるようにするために生成
          # package-lock.jsonはパッケージの依存関係をまとめたファイル
          key: dependencies-node-modules-${{ hashFiles('**/package-lock.json') }}
      # キャッシュ済みの依存関係が存在しなければ実行される
      - name: Install dependencies
        run: npm ci
      - name: Lint codes
        run: npm run lint
      - name: Run tests
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    # ジョブの出力例
    # https://docs.github.com/ja/actions/using-jobs/defining-outputs-for-jobs
    outputs:
      # keyの名前は任意 valueは ${{ steps.<id>.outputs.<idを指定した step 内の runで指定したkey> }}
      # https://docs.github.com/ja/actions/learn-github-actions/contexts#steps-context
      output1: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: dependencies-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      # buildでデプロイに必要なパッケージが生成される
      - name: Build
        run: npm run build
      - name: Publish JS filename
        # 他のジョブに変数(今回の場合、ファイル名)を渡せるようにするためにidを指定
        id: publish
        # dist/assets以下にある *.js のファイルを出力
        # 他のジョブに変数(今回の場合、ファイル名)を渡せるようにするために
        # script-fileという key(名前は任意), value: echoの出力結果 となる key-valueを $GITHUB_OUTPUT という値に出力する必要がある
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        # テンプレート: https://github.com/marketplace/actions/upload-a-build-artifact
        uses: actions/upload-artifact@v3
        # 後続のジョブで参照するパッケージのパスが必要なので、このテンプレートの場合、withは必須
        with:
          name: dist-files
          path: dist
          # アップロード対象のファイルは以下のように複数指定も可能
          # path: |
          #  path/output/bin/
          #  path/output/test-results
          #  !path/**/*.tmp
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # job間で指定されているruns-onのマシンは別々なので、通常はbuildジョブで指定されたarfitactは存在しない
      # そのため、デプロイ前にbuildジョブで生成済みのartifactをダウンロードする
      - name: Download build artifact
        # https://github.com/marketplace/actions/download-a-build-artifact
        uses: actions/download-artifact@v3
        # ダウンロードするarifactのパスが必要なのでwithは必須
        with:
          # nameの値は Upload artifactsの with.nameで指定した値に揃える必要がある
          name: dist-files
      - name: Output contents
        run: ls
      - name: Output filename
        # 前段のジョブの結果も含めた出力が取得できるので、 needsコンテキストを利用する
        # 規則: needs.<参照したいneedsの値>.outputs.<参照したいneedsの値として指定されたjob内の outputsのkey>
        # <参照したいneedsの値として指定されたjob内の outputsのkey>: 今回の場合、 build.outputs.output1
        # https://docs.github.com/ja/actions/learn-github-actions/contexts#needs-context
        run:  echo "${{ needs.build.outputs.output1 }}"
      - name: Deploy
        run: echo "Deploying ..."

