name: continue execution flow
on:
  push:
    branches:
      - section7
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        # cacheの結果はcache-hit という値を通して取得できる。キャッシュを使ったならtrue(文字列)、そうでないならfalse
        # https://github.com/actions/cache#outputs
        # 条件判定はシングルクォーテーションである必要がある
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint code
        run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Test code
        # このstepが失敗したとき、Upload test reportが動くようにするためにidをつける。値は任意
        id: test-code
        # continue-on-error trueでstepが失敗しても、後続の処理が実行されるようにする
        continue-on-error: true
        run: npm run test
      - name: Upload test report
        # idを指定したstepの実行結果を受け取れるようにする。stepが失敗したかどうかは steps.<step_id>.outcomeで受け取れる
        # steps.<step_id>.outcomeの値は success, failure, cancelled, skippedのいずれか
        # 詳細: https://docs.github.com/ja/actions/learn-github-actions/contexts#steps-context
        # 特定のstepが失敗したと認識させるためには、 steps.<step_id>.outcomeの値が一致するだけでなく、特殊関数 failure()が必要
        # 詳細: https://docs.github.com/ja/actions/learn-github-actions/expressions#status-check-functions 
        if: failure() && steps.test-code.outcome == 'failure'
        # if: ${{ failure() && steps.test-code.outcome == 'failure' }} とも書ける
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build website
        id: build-website
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Deploy
        run: echo "Deploying..."
  report:
    # lint or deployどちらかが失敗することで動く
    # deployは test, buildに依存して実行されるので、実質 lint, test, build, deployのいずれかが失敗したらこのジョブが動く
    needs: [lint, deploy]
    # 他の jobで起こったエラーをトリガーとして、steps以下が動く。
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Output Information
        run: |
          echo "Someting went wrong"
          echo "${{ github }}"